package com.adserversoft.flexfuse.client.model.vo {
import com.adserversoft.flexfuse.client.ApplicationFacade;
import com.adserversoft.flexfuse.client.model.ApplicationConstants;
import com.adserversoft.flexfuse.client.model.BannerProxy;

import mx.collections.ArrayCollection;

[Bindable]
[RemoteClass(alias="com.adserversoft.flexfuse.server.api.Banner")]
public dynamic class BannerVO extends BaseVO {
    public var id:Object;// created by the database

    public static var counter:int = 1;

    public var uid:String;// id generated by client
    public var parentUid:String; // if created as a result of dragging, parentUid is set
    public var adPlaceUid:String;// if dragged to an ad place, adPlaceUid is set

    public var targetUrl:String = "http://www.";
    public var bannerName:String;

    public var bannerContentTypeId:int;
    public var adFormatId:int;
    public var fileSize:int;
    public var filename:String;

    public var bannerContentTypeId2:int;
    public var adFormatId2:int;
    public var fileSize2:int;
    public var filename2:String;

    public var bannerContentTypeId3:int;
    public var adFormatId3:int;
    public var fileSize3:int;
    public var filename3:String;

    public var bannerContentTypeId4:int;
    public var adFormatId4:int;
    public var fileSize4:int;
    public var filename4:String;

    public var bannerContentTypeId5:int;
    public var adFormatId5:int;
    public var fileSize5:int;
    public var filename5:String;

    public var displayOrder:int;

    private var _views:int;
    private var _clicks:int;
    public var ctr:String;
    public var priority:int = -1;

    public var ongoing:Boolean = true;
    public var startDate:Date;
    public var endDate:Date;
    public var oneOnPage:Boolean = true;
    public var partyAdTag:Boolean = false;
    public var adTag:String;

    public var hourBits:String;
    public var dayBits:String;
    public var browserBits:String;
    public var countryBits:String;
    public var osBits:String;
    public var languageBits:String;

    public var bannerState:int = ApplicationConstants.STATE_ACTIVE;

    public var trafficShare:int;

    public var isBannerFileChanged:Boolean = false;

    public var dailyViewsLimit:int;//Daily views limit
    public var maxNumberViews:int;//Maximum number of views for the whole display period
    public var label:String;
    public var frameTargeting:Boolean = true;

    public function BannerVO() {
        adFormat = ApplicationConstants.sortedAdFormatsCollection.getItemAt(0) as AdFormatVO;
        bannerName = "new banner " + counter++;
        trafficShare = 100;
        views = 0;
        clicks = 0;
        ctr = String((views == 0) ? 0 : Math.round(((clicks / views) * 100) * 100) / 100) + "%";
    }

    public function isAdFormatEnabled():Boolean {
        var bannerProxy:BannerProxy = ApplicationFacade.getInstance().retrieveProxy(BannerProxy.NAME) as BannerProxy;
        if (parentUid == null) {//checking children if parent
            return bannerProxy.getBannersByParentUid(uid).length == 0;
        } else {//this is assigned banner, ad format should be disabled
            return false;
        }
    }


    public function get adFormat():AdFormatVO {
        return ApplicationConstants.AD_FORMATS.getValue(adFormatId);
    }

    public function set adFormat(af:AdFormatVO):void {
        this.adFormatId = af.id;
    }

    public function get fileSizeString():String {
        var stringFileSize:String = "" + Math.round(fileSize / 1024 * 100) / 100;
        if (stringFileSize.indexOf(".") == -1) {
            stringFileSize += ".00";
        } else if (stringFileSize.substring(stringFileSize.indexOf(".") + 1).length == 1) {
            stringFileSize += "0";
        }
        return stringFileSize.replace(".", ",") + " Kb";
    }

    public function set fileSizeString(s:String):void {
        trace(s);
    }

    public function get adFormatName():String {
        return adFormat.adFormatName;
    }

    public function get shortAdFormatName():String {
        return "" + adFormat.width + "x" + adFormat.height;
    }

    public function get views():int {
        return _views;
    }

    public function set views(v:int):void {
        _views = v;
        ctr = String((views == 0) ? 0 : Math.round(((clicks / views) * 100) * 100) / 100) + "%";
    }

    public function get clicks():int {
        return _clicks;
    }

    public function set clicks(v:int):void {
        _clicks = v;
        ctr = String((views == 0) ? 0 : Math.round(((clicks / views) * 100) * 100) / 100) + "%";
    }

    public function isAllBitsSelected(bits:String):Boolean {
        return bits.search('0') == -1;
    }

    public function mergeProperties(banner:BannerVO):void {
        id = banner.id;
        uid = banner.uid;
        parentUid = banner.parentUid;
        adPlaceUid = banner.adPlaceUid;
        targetUrl = banner.targetUrl;
        bannerName = banner.bannerName;
        bannerContentTypeId = banner.bannerContentTypeId;
        fileSize = banner.fileSize;
        filename = banner.filename;
        views = banner.views;
        clicks = banner.clicks;
        priority = banner.priority;
        ongoing = banner.ongoing;
        startDate = banner.startDate;
        endDate = banner.endDate;
        oneOnPage = banner.oneOnPage;
        partyAdTag = banner.partyAdTag;
        adTag = banner.adTag;
        hourBits = banner.hourBits;
        dayBits = banner.dayBits;
        browserBits = banner.browserBits;
        osBits = banner.osBits;
        adFormatId = banner.adFormatId;
        bannerState = banner.bannerState;
        isBannerFileChanged = banner.isBannerFileChanged;
        dailyViewsLimit = banner.dailyViewsLimit;
        maxNumberViews = banner.maxNumberViews;
        trafficShare = banner.trafficShare;
        countryBits = banner.countryBits;
        languageBits = banner.languageBits;
        displayOrder = banner.displayOrder;
        label = banner.label;
        frameTargeting = banner.frameTargeting;
    }

    public function toString():String {
        return "uid:" + uid+";parentUid:"+parentUid+"adPlaceUid:"+adPlaceUid+";priority:"+priority;
    }

    public function getBannerFiles():ArrayCollection {
        var bannerFiles:ArrayCollection = new ArrayCollection();
        if (filename != null) {
            bannerFiles.addItem(new BannerFileVO(adFormatId, filename, fileSize));
            bannerFiles.addItem(new BannerFileVO(adFormatId, filename, fileSize));  //todo
        }
        if (filename2 != null) {
            bannerFiles.addItem(new BannerFileVO(adFormatId2, filename2, fileSize2));
        }
        if (filename3 != null) {
            bannerFiles.addItem(new BannerFileVO(adFormatId3, filename3, fileSize3));
        }
        if (filename4 != null) {
            bannerFiles.addItem(new BannerFileVO(adFormatId4, filename4, fileSize4));
        }
        if (filename5 != null) {
            bannerFiles.addItem(new BannerFileVO(adFormatId5, filename5, fileSize5));
        }
        return bannerFiles;
    }
}
}